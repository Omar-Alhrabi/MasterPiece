@extends('layouts.admin')

@section('title', 'Event Calendar')

@section('content')
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Event Calendar</h1>
        <div>
        @if(Auth::user()->isAdmin())
            <a href="{{ route('events.create') }}" class="btn btn-primary btn-sm shadow-sm">
                <i class="fas fa-plus fa-sm text-white-50 mr-1"></i> Add Event
            </a>
        @endif
            <a href="{{ route('events.index') }}" class="btn btn-secondary btn-sm shadow-sm ml-2">
                <i class="fas fa-list fa-sm text-white-50 mr-1"></i> List View
            </a>
        </div>
    </div>

    <!-- Calendar -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Calendar</h6>
            <div class="btn-group">
                <button type="button" id="prev-month" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button type="button" id="current-month" class="btn btn-sm btn-outline-primary mx-2">
                    Today
                </button>
                <button type="button" id="next-month" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            <div id="calendar-title" class="h5 mb-0 text-gray-800">
                {{ now()->format('F Y') }}
            </div>
            <div class="btn-group">
                <button type="button" class="btn btn-sm btn-outline-secondary view-option" data-view="list">List</button>
                <button type="button" class="btn btn-sm btn-outline-secondary view-option" data-view="day">Day</button>
                <button type="button" class="btn btn-sm btn-outline-secondary view-option" data-view="week">Week</button>
                <button type="button" class="btn btn-sm btn-outline-secondary view-option active" data-view="month">Month</button>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-9">
                    <div id="calendar-container">
                        <table class="table table-bordered calendar-table">
                            <thead>
                                <tr>
                                    <th class="text-center">Sun</th>
                                    <th class="text-center">Mon</th>
                                    <th class="text-center">Tue</th>
                                    <th class="text-center">Wed</th>
                                    <th class="text-center">Thu</th>
                                    <th class="text-center">Fri</th>
                                    <th class="text-center">Sat</th>
                                </tr>
                            </thead>
                            <tbody id="calendar-body">
                                <!-- Calendar will be generated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">My Calendars</h6>
                        </div>
                        <div class="card-body">
                            <div class="calendar-categories">
                                <div class="custom-control custom-checkbox mb-2">
                                    <input type="checkbox" class="custom-control-input" id="work-calendar" checked>
                                    <label class="custom-control-label" for="work-calendar">
                                        <span class="text-primary">Work</span>
                                    </label>
                                </div>
                                <div class="custom-control custom-checkbox mb-2">
                                    <input type="checkbox" class="custom-control-input" id="personal-calendar" checked>
                                    <label class="custom-control-label" for="personal-calendar">
                                        <span class="text-success">Personal</span>
                                    </label>
                                </div>
                                <div class="custom-control custom-checkbox mb-2">
                                    <input type="checkbox" class="custom-control-input" id="important-calendar" checked>
                                    <label class="custom-control-label" for="important-calendar">
                                        <span class="text-danger">Important</span>
                                    </label>
                                </div>
                                <div class="custom-control custom-checkbox mb-2">
                                    <input type="checkbox" class="custom-control-input" id="travel-calendar" checked>
                                    <label class="custom-control-label" for="travel-calendar">
                                        <span class="text-info">Travel</span>
                                    </label>
                                </div>
                                <div class="custom-control custom-checkbox mb-2">
                                    <input type="checkbox" class="custom-control-input" id="friends-calendar" checked>
                                    <label class="custom-control-label" for="friends-calendar">
                                        <span class="text-warning">Friends</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card mt-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Upcoming Events</h6>
                        </div>
                        <div class="card-body">
                            <div id="upcoming-events-list">
                                <!-- Upcoming events will be loaded here by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Event Modal -->
    <div class="modal fade" id="eventModal" tabindex="-1" role="dialog" aria-labelledby="eventModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="event-details">
                        <!-- Event details will be loaded here by JavaScript -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @if(Auth::user()->isAdmin())
                    <a href="#" id="edit-event-btn" class="btn btn-primary">Edit Event</a>
                    @endif
                </div>
            </div>
        </div>
    </div>
@endsection

@push('styles')
<style>
    .calendar-table {
        table-layout: fixed;
        height: 800px;
    }
    .calendar-table th {
        background-color: #f8f9fc;
    }
    .calendar-table td {
        height: 120px;
        vertical-align: top;
        padding: 5px;
    }
    .calendar-table td.other-month {
        background-color: #f8f9fc;
        color: #b7b9cc;
    }
    .calendar-table td .date-number {
        font-weight: bold;
        margin-bottom: 5px;
    }
    .calendar-table td.today {
        background-color: #eef8ff;
    }
    .event-card {
        margin-bottom: 5px;
        padding: 5px;
        border-radius: 4px;
        font-size: 12px;
        cursor: pointer;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    .event-card.work {
        background-color: #4e73df;
        color: white;
    }
    .event-card.personal {
        background-color: #1cc88a;
        color: white;
    }
    .event-card.important {
        background-color: #e74a3b;
        color: white;
    }
    .event-card.travel {
        background-color: #36b9cc;
        color: white;
    }
    .event-card.friends {
        background-color: #f6c23e;
        color: white;
    }
    .view-option.active {
        background-color: #4e73df;
        color: white;
    }
</style>
@endpush

@push('scripts')
<script>
    $(document).ready(function() {
        // Calendar data from the server
        const calendarEvents = @json($calendarEvents);
        
        // Initialize calendar
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();
        
        // Generate and display the calendar
        generateCalendar(currentMonth, currentYear);
        updateCalendarTitle(currentMonth, currentYear);
        populateEventCards(calendarEvents);
        populateUpcomingEvents(calendarEvents);
        
        // Previous month button
        $('#prev-month').click(function() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            generateCalendar(currentMonth, currentYear);
            updateCalendarTitle(currentMonth, currentYear);
            populateEventCards(calendarEvents);
        });
        
        // Next month button
        $('#next-month').click(function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            generateCalendar(currentMonth, currentYear);
            updateCalendarTitle(currentMonth, currentYear);
            populateEventCards(calendarEvents);
        });
        
        // Today button
        $('#current-month').click(function() {
            const now = new Date();
            currentMonth = now.getMonth();
            currentYear = now.getFullYear();
            generateCalendar(currentMonth, currentYear);
            updateCalendarTitle(currentMonth, currentYear);
            populateEventCards(calendarEvents);
        });
        
        // View options
        $('.view-option').click(function() {
            $('.view-option').removeClass('active');
            $(this).addClass('active');
            const view = $(this).data('view');
            // Here you would implement switching between views
            // For now we'll just show an alert
            if (view !== 'month') {
                alert('This view is not implemented in this demo');
            }
        });
        
        // Toggle calendar categories
        $('.calendar-categories input[type="checkbox"]').change(function() {
            const category = $(this).attr('id').replace('-calendar', '');
            $('.event-card.' + category).toggle($(this).is(':checked'));
        });
        
        // Functions to manage calendar
        function generateCalendar(month, year) {
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = 32 - new Date(year, month, 32).getDate();
            const daysInPrevMonth = 32 - new Date(year, month - 1, 32).getDate();
            const today = new Date();
            
            let calendarBody = '';
            let date = 1;
            
            // Create calendar rows and cells
            for (let i = 0; i < 6; i++) {
                // Create a table row
                calendarBody += '<tr>';
                
                // Fill the row with cells
                for (let j = 0; j < 7; j++) {
                    if (i === 0 && j < firstDay) {
                        // Empty cells before the first day of month
                        const prevMonthDay = daysInPrevMonth - (firstDay - j - 1);
                        calendarBody += `<td class="other-month">
                                            <div class="date-number">${prevMonthDay}</div>
                                            <div class="events-container"></div>
                                        </td>`;
                    } else if (date > daysInMonth) {
                        // Days from next month
                        const nextMonthDay = date - daysInMonth;
                        calendarBody += `<td class="other-month">
                                            <div class="date-number">${nextMonthDay}</div>
                                            <div class="events-container"></div>
                                        </td>`;
                        date++;
                    } else {
                        // Current month days
                        let className = '';
                        if (year === today.getFullYear() && month === today.getMonth() && date === today.getDate()) {
                            className = 'today';
                        }
                        
                        calendarBody += `<td class="${className}" data-date="${year}-${(month + 1).toString().padStart(2, '0')}-${date.toString().padStart(2, '0')}">
                                            <div class="date-number">${date}</div>
                                            <div class="events-container"></div>
                                        </td>`;
                        date++;
                    }
                }
                
                calendarBody += '</tr>';
                
                // Stop generating calendar after we've gone past the current month
                if (date > daysInMonth && i >= 4) break;
            }
            
            $('#calendar-body').html(calendarBody);
        }
        
        function updateCalendarTitle(month, year) {
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            $('#calendar-title').text(months[month] + ' ' + year);
        }
        
        function populateEventCards(events) {
            // Clear all event containers
            $('.events-container').empty();
            
            // Populate events
            events.forEach(event => {
                const eventDate = new Date(event.start);
                const dateString = eventDate.toISOString().split('T')[0];
                const cell = $(`td[data-date="${dateString}"]`);
                
                if (cell.length) {
                    // Determine event category (in a real app, this would be based on event data)
                    const categories = ['work', 'personal', 'important', 'travel', 'friends'];
                    const category = categories[Math.floor(Math.random() * categories.length)];
                    
                    // Format the time
                    const time = eventDate.toTimeString().substring(0, 5);
                    
                    // Create event card
                    const eventCard = $(`<div class="event-card ${category}" data-id="${event.id}">
                                            ${time} ${event.title}
                                        </div>`);
                    
                    // Add event to the calendar
                    cell.find('.events-container').append(eventCard);
                    
                    // Add click event to show details
                    eventCard.click(function() {
                        showEventDetails(event);
                    });
                }
            });
        }
        
        function populateUpcomingEvents(events) {
            const upcomingEvents = events
                .filter(event => new Date(event.start) >= new Date())
                .sort((a, b) => new Date(a.start) - new Date(b.start))
                .slice(0, 5);
            
            let upcomingHTML = '';
            
            if (upcomingEvents.length === 0) {
                upcomingHTML = '<p class="text-muted">No upcoming events</p>';
            } else {
                upcomingEvents.forEach(event => {
                    const eventDate = new Date(event.start);
                    const dateString = eventDate.toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric' 
                    });
                    const timeString = eventDate.toLocaleTimeString('en-US', { 
                        hour: '2-digit', 
                        minute: '2-digit'
                    });
                    
                    upcomingHTML += `
                        <div class="mb-3">
                            <div class="small text-gray-500">${dateString} at ${timeString}</div>
                            <div class="font-weight-bold">
                                <a href="#" class="upcoming-event" data-id="${event.id}">${event.title}</a>
                            </div>
                            <div class="small text-muted">${event.location || 'No location'}</div>
                        </div>
                    `;
                });
            }
            
            $('#upcoming-events-list').html(upcomingHTML);
            
            // Add click event to show details for upcoming events
            $('.upcoming-event').click(function(e) {
                e.preventDefault();
                const eventId = $(this).data('id');
                const event = events.find(e => e.id == eventId);
                if (event) {
                    showEventDetails(event);
                }
            });
        }
        
        function showEventDetails(event) {
            // Format the event date and time
            const eventDate = new Date(event.start);
            const dateString = eventDate.toLocaleDateString('en-US', { 
                weekday: 'long',
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            const timeString = eventDate.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit'
            });
            
            // Build the details HTML
            let detailsHTML = `
                <h4>${event.title}</h4>
                <p class="mb-2"><i class="fas fa-calendar-alt mr-2"></i>${dateString}</p>
                <p class="mb-2"><i class="fas fa-clock mr-2"></i>${timeString}</p>
            `;
            
            if (event.location) {
                detailsHTML += `<p class="mb-2"><i class="fas fa-map-marker-alt mr-2"></i>${event.location}</p>`;
            }
            
            if (event.organizer) {
                detailsHTML += `<p class="mb-2"><i class="fas fa-user mr-2"></i>Organized by: ${event.organizer}</p>`;
            }
            
            if (event.description) {
                detailsHTML += `
                    <hr>
                    <h5>Description</h5>
                    <p>${event.description}</p>
                `;
            }
            
            // Set the edit button URL
            $('#edit-event-btn').attr('href', `{{ route('events.edit', '') }}/${event.id}`);
            
            // Update the modal content and show it
            $('#event-details').html(detailsHTML);
            $('#eventModal').modal('show');
        }
    });
</script>
@endpush